#!/usr/bin/env node

// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
  Takes in strokes.
  //Write out a csv of cell values.
  Write out a JSON of cell values. an array of rows.
  each row is a step and each element is a cell (column)
*/

var nj = require("../public/model/numjs.js"),
    Model = require("../public/model/node-bundle.js"),
    SimpleModel = require("../public/model/simple-model.js"),
    Matrix = require('ml-matrix'),
    PCA = require ('ml-pca'),
    ProgressBar = require('progress');

var json = "";

process.stdin.setEncoding('utf8');
process.stdin.on('readable', () => {
  var chunk = process.stdin.read();
  if (chunk !== null) {
    json += chunk.toString();
  }
});
process.stdin.on('end', () => {
  str = json.split('\n')
  json = "[" + str.slice(1) + "]"
  extract(JSON.parse(json))
});

function extract(samples) {
  //console.log("samples", samples.length)
  var steps = []
  samples.forEach(function(sample) {
    steps = steps.concat(sample)
  })
  //var bar = new ProgressBar(':bar', { total: coordinates.length, width: 50 });
  //console.log("steps", steps[0])

  var matrix = new Matrix(steps)
  var pca = new PCA(matrix)
  //console.log("pca", pca)
  var eigenvectors = pca.getEigenvectors()
  var eigenvalues = pca.getEigenvalues()
  //console.log("eigen vectors", evectors)
  //console.log("eigen values", evectors)

  evectors = eigenvectors.map(function(row) { return row.map(function(d) { return Math.floor(d * 100)/100 }) })
  evalues = eigenvalues.map(function(d) { return Math.floor(d * 100)/100 })

  process.stdout.write(JSON.stringify({eigenvectors: evectors, eigenvalues: evalues}));
  //process.stdout.write(csv);
}
