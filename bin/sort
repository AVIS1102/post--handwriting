#!/usr/bin/env node

// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
  Takes in strokes.
  //Write out a csv of cell values.
  Write out a JSON of cell values. an array of rows.
  each row is a step and each element is a cell (column)
*/


var tsnejs = require('../assets/tsne.js');
var d3 = require('d3')
var ProgressBar = require('progress');


function mean(l){ return l.reduce((a,b) => a+b, 0)/l.length;}

function convolve(l, k){
  var D = Math.floor((k.length-1)/2);
  var ret = []
  for (var i = D; i < l.length-k.length+1+D; i++){
    var val = 0;
    for (var j = 0; j < k.length; j++){
      val += k[j]*l[i+j-D];
    }
    ret.push(val);
  }
  return ret;
}

function percentiles(l, slices){
  var L = l.slice().sort();
  var N = L.length;
  var D = N/slices;
  var ret = [];
  for (var i = 0; i < slices; i++){
    var a = Math.floor(i*D), b = Math.floor((i+1)*D);
    var sum = 0;
    for (var j = a; j < b; j++) {
      sum += L[j]
    }
    ret.push(sum/(b-a));
  }
  return ret;
}

function percentileMap(l, n, m, step){
  step = step || 1;
  var l_percentiles = [];
  for(var j = 0; j < n; j++) { l_percentiles.push([]); }
  for(var j = 0; j < l.length - n; j += step) {
    percentiles(l.slice(j, j+n),m).forEach( (x,j) => l_percentiles[j].push(x))
  }
  return l_percentiles;
}

var json = "";

process.stdin.setEncoding('utf8');
process.stdin.on('readable', () => {
  var chunk = process.stdin.read();
  if (chunk !== null) {
    json += chunk.toString();
  }
});
process.stdin.on('end', () => {
  str = json.split('\n')
  json = "[" + str.slice(1) + "]"
  extract(JSON.parse(json))
});

function extract(samples) {
  var stepLimit = 370;
  var STEPS = 4000
  var bar = new ProgressBar(':bar', { total: STEPS, width: 50 });


  var steps = samples[0]
  //console.log("step", steps.length)

  var bycell = d3.range(500).map(function() { return [] })
  for(var i = 0; i < stepLimit; i++) {
    // basically transposing...
    for(var j = 0; j < bycell.length; j++) {
      bycell[j][i] = steps[i][j]
    }
  }

  var flipCell = []
  bycell.forEach(function(cell,i) {
    //var negative = cell.reduce(function(sum, d) { return d < 0 ? sum + 1 : sum }, 0)
    //if(negative > 50) bycell[i] = cell.map(function(d) { return d * -1 })
    //if(negative > 100) cell = cell.map(function(d) { return d * -1 })
    var sum = d3.sum(cell)

    var sum = d3.sum(cell)
    if(sum < 0) {
      cell = cell.map(function(d) { return d * -1 })
      flipCell[i] = -1
    } else {
      flipCell[i] = 1
    }

    var blurred = []


    var derivs = convolve(cell, [-1,1]);
    var derivsAbs = derivs.map(Math.abs);

    //convolve(cell, [0.2,1,0.2]).forEach(x => blurred.push(x))
    //percentileMap(derivs, 5, 5, 1).forEach(l => l.forEach(x => blurred.push(x)))
    //percentileMap(cell, 5, 5, 1)
    //  .forEach(l => l.forEach(x => blurred.push(x)))
    percentileMap(cell, 5, 5, 1)
      .forEach(l => l.forEach(x => blurred.push(x)))
    percentileMap(cell, 5, 5, 1).map(l =>convolve(l, [0.2, 0.4, 1, 0.4, 0.2]))
      .forEach(l => l.forEach(x => blurred.push(x)))
    //percentileMap(cell, 20, 10, 1)
    //  .forEach(l => l.forEach(x => blurred.push(x/2)))
    //percentileMap(derivsAbs, 5, 5, 1)
    //  .forEach(l => l.forEach(x => blurred.push(x)))
    //percentileMap(derivs, 5, 5, 1)
    //  .forEach(l => l.forEach(x => blurred.push(x)))
    //percentileMap(convolve(cell, [-0.5,0,1,0,-0.5]).map(Math.abs), 5,5,1)
    //  .forEach(l => l.forEach(x => blurred.push(x)))



    bycell[i] = blurred;

    //var mean = d3.mean(cell)
    //bycell[i] = cell.map(function(d) { return d - mean })
    //cell = cell.map(function(d) { return d - mean })

    /*var extent = d3.extent(cell)
    var cscale = d3.scaleLinear().domain(extent)
      .range([0,1])
    bycell[i] = cell.map(function(d) { return cscale(d)})*/
  })
  console.log("flip cell\n")
  process.stdout.write(JSON.stringify(flipCell))
  console.log("\n")


  // TSNE calculations on all 500 cells
  //console.log("TSNE")
  var opt = {}
  opt.epsilon = 10; // epsilon is learning rate (10 = default)
  opt.perplexity = 50; // roughly how many neighbors each point influences (30 = default)
  opt.dim = 1; // dimensionality of the embedding (2 = default)
  var tsne = new tsnejs.tSNE(opt); // create a tSNE instance

  tsne.initDataRaw(bycell);

  for(var k = 0; k < STEPS; k++) {
    //console.log("step", k)
    bar.tick();
    tsne.step(); // every time you call this, solution gets better
  }
  out = tsne.getSolution().map(function(d) { return d[0] });
  //console.log("tsne solution", out)

  var indexes = d3.range(bycell.length)
  indexes.sort(function(a,b) {
    return out[b] - out[a]
  })

  console.log("indexes\n")
  process.stdout.write(JSON.stringify(indexes))

}
