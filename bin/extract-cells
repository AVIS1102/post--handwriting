#!/usr/bin/env node

// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
  Takes in strokes.
  //Write out a csv of cell values.
  Write out a JSON of cell values. an array of rows.
  each row is a step and each element is a cell (column)
*/

var nj = require("../public/model/numjs.js"),
    Model = require("../public/model/node-bundle.js"),
    SimpleModel = require("../public/model/simple-model.js"),
    ProgressBar = require('progress');

var json = "";

process.stdin.setEncoding('utf8');
process.stdin.on('readable', () => {
  var chunk = process.stdin.read();
  if (chunk !== null) {
    json += chunk.toString();
  }
});
process.stdin.on('end', () => {
  extract(JSON.parse(json))
});

function extract(coordinates) {
  var model = new SimpleModel(Model);
  var bar = new ProgressBar(':bar', { total: coordinates.length, width: 50 });

  var rows = []
  //csv = ""
  var previousCoordinates = [0, 0, 0];
  model.update(0,0,0);
  coordinates.forEach(function(c) {
    model.update(c[0], c[1], c[2]);
    var row = pullCells(model)
    //rows.push(row)
    // we can save up to 60% by truncating all the floats
    rows.push(row.map(function(d) { return Math.floor(d * 100)/100 }))
    //csv += row.toString() + "\n"
    bar.tick();
  })
  process.stdout.write(JSON.stringify(rows));
  //process.stdout.write(csv);
}



function pullCells(model) {
  var cells = [];
  for(var i = 0; i < 500; i++) {
    cells.push(model.modelS[1].get(i))
  }
  return cells;
}
